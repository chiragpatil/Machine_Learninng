# -*- coding: utf-8 -*-
"""CollaborativeFiltering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xeubKsnSTfMffu_7N7zgg-r6bKg2M3iC
"""

# from google.colab import files
# files.upload()

"""# ***SIMILAR USER BASED ON RATING***"""

import zipfile
zip_ref = zipfile.ZipFile('movielens-100k-dataset.zip','r')
zip_ref.extractall('dataset')
zip_ref.close()

import pandas as pd

u_columns = ['user_id','age','gender','occupation','zipcode']
users = pd.read_csv('dataset/ml-100k/u.user',sep='|' ,names=u_columns)



i_cols = ['movie_id', 'title' ,'release date','video release date', 'IMDb URL', 'unknown', 'Action','Adventure', \
'Animation', 'Children\'s', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', \
'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']
items= pd.read_csv('dataset/ml-100k/u.item',sep='|',encoding='latin-1',names = i_cols)
items.head()

movies = items[['movie_id', 'title']] # need only these two from items



del items

r_cols = ['user_id', 'movie_id', 'rating', 'timestamp']
ratings = pd.read_csv('dataset/ml-100k/u.data', sep='\t', names=r_cols,encoding='latin-1')

ratings = ratings.drop('timestamp', axis=1) # no need of timestamp

X = ratings.copy()
y = ratings['user_id']
ratings.head()

rating_data = pd.pivot_table(data = ratings ,values='rating',index='user_id',columns='movie_id')

rating_data.head()

rating_data.fillna(0,inplace=True)

import numpy as np
from sklearn.neighbors import NearestNeighbors

def findSimilar(user_id,data,k=7,):
    knn = NearestNeighbors()
    knn.fit(data)
    distance , indices = knn.kneighbors(data.iloc[user_id, :].values.reshape(-1, 1682), n_neighbors = k+1)
    return(indices)

def recommended_movie(data):
    rec_movie_id =[]
    main = data.iloc[0,:]
    main = main[main>0].index
    main = np.array(main)
    for i in range(1,8):
        current = data.iloc[i,:]
#         print('current',i,current[current>0])
        c_set = np.array(current[current>3].index)
        final_index = np.setdiff1d(c_set,main)
        final_id = final_index-1
#         max_rate_movie = np.argsort(data.iloc[i,final_id])
        rec_movie_id.extend(data.iloc[i,final_id].index)
#         print('max_rate_movie',max_rate_movie)
#         print('data_iloc',data.iloc[i,max_rate_movie-1])
#         rec_movie_id.append(max_rate_movie)

    return rec_movie_id

similar_users = findSimilar(1,rating_data)
similar_users = similar_users.flatten()
data= rating_data.iloc[similar_users, :]
movie_ids = recommended_movie(data)

from collections import Counter
similar = Counter(movie_ids)




